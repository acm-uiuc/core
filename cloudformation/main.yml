AWSTemplateFormatVersion: 2010-09-09
Description: ACM Core Management Platform
Transform: AWS::Serverless-2016-10-31

Parameters:
  RunEnvironment:
    Type: String
    AllowedValues: ["dev", "prod"]
  AlertSNSArn:
    Description: SNS Queue to send general alarm alerts to (prod only)
    Type: String
    Default: arn:aws:sns:us-east-1:298118738376:infra-monitor-alerts
  PriorityAlertSNSArn:
    Description: SNS Queue to send priority alarm alerts to (prod only)
    Type: String
    Default: arn:aws:sns:us-east-1:298118738376:infra-core-api-priority-alerts
  ApplicationPrefix:
    Type: String
    Description: Application prefix, no ending dash
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  ApplicationFriendlyName:
    Type: String
    Description: Application friendly name that will be used in resource descriptions
  VpcRequired:
    Description: Set to true if the default lambda should be attached to a VPC and a NoVPC version of the lambda should be created. Lambdas to be attached to VPCs to access Postgres.
    Default: false
    Type: String
    AllowedValues: [true, false]
  SqsLambdaTimeout:
    Description: How long the SQS lambda is permitted to run (in seconds)
    Default: 180
    Type: Number
  SqsMessageTimeout:
    Description: MessageVisibilityTimeout for the SQS Lambda queue (should be at least (numMaxRetry + 1)*SqsLambdaTimeout)
    Default: 720
    Type: Number
  S3BucketPrefix:
    Description: S3 bucket prefix which will ensure global uniqueness
    Type: String

Conditions:
  IsProd: !Equals [!Ref RunEnvironment, "prod"]
  ShouldAttachVpc: !Equals [true, !Ref VpcRequired]

Mappings:
  General:
    dev:
      LogRetentionDays: 7
      SesDomain: "aws.qa.acmuiuc.org"
    prod:
      LogRetentionDays: 90
      SesDomain: "acm.illinois.edu"
  ApiGwConfig:
    dev:
      HostedZoneId: Z04502822NVIA85WM2SML
      UiDomainName: "core.aws.qa.acmuiuc.org"
      EnvDomainName: "aws.qa.acmuiuc.org"
      EnvCertificateArn: arn:aws:acm:us-east-1:427040638965:certificate/63ccdf0b-d2b5-44f0-b589-eceffb935c23
    prod:
      HostedZoneId: Z05246633460N5MEB9DBF
      UiDomainName: "core.acm.illinois.edu"
      EnvDomainName: "acm.illinois.edu"
      EnvCertificateArn: arn:aws:acm:us-east-1:298118738376:certificate/aeb93d9e-b0b7-4272-9c12-24ca5058c77e
  EnvironmentToCidr:
    dev:
      SecurityGroupIds:
        - sg-00443e61d39721a0d
        - sg-0e99aa1c1e4e9e5b6
      SubnetIds:
        - subnet-0cd2b887e61f6edd8
        - subnet-065857a2bdf3a51aa
        - subnet-09e12f156435e4cc9
    prod:
      SecurityGroupIds:
        - sg-066e3ae1d05e70fcd
      SubnetIds:
        - subnet-0cf33aff80b81eb1b
        - subnet-0cbe89f6ab2665610

Resources:
  AppSecurityRoles:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./iam.yml
      Parameters:
        RunEnvironment: !Ref RunEnvironment
        LambdaFunctionName: !Sub ${ApplicationPrefix}-lambda
        SesEmailDomain: !FindInMap [General, !Ref RunEnvironment, SesDomain]
        SqsQueueArn: !GetAtt AppSQSQueues.Outputs.MainQueueArn
        LinkryKvArn: !GetAtt LinkryRecordsCloudfrontStore.Arn

  AppLogGroups:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./logs.yml
      Parameters:
        LambdaFunctionName: !Sub ${ApplicationPrefix}-lambda
        LogRetentionDays:
          !FindInMap [General, !Ref RunEnvironment, LogRetentionDays]

  AppSQSQueues:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./sqs.yml
      Parameters:
        QueueName: !Sub ${ApplicationPrefix}-sqs
        MessageTimeout: !Ref SqsMessageTimeout

  IcalDomainProxy:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./custom-domain.yml
      Parameters:
        RunEnvironment: !Ref RunEnvironment
        RecordName: ical
        GWBaseDomainName: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvDomainName
        GWCertArn: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvCertificateArn
        GWApiId: !Ref AppApiGateway
        GWHostedZoneId:
          !FindInMap [ApiGwConfig, !Ref RunEnvironment, HostedZoneId]
        CloudfrontDomain: !GetAtt [AppIcalCloudfrontDistribution, DomainName]

  CoreUrlProd:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./custom-domain.yml
      Parameters:
        RunEnvironment: !Ref RunEnvironment
        RecordName: core
        GWBaseDomainName: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvDomainName
        GWCertArn: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvCertificateArn
        GWApiId: !Ref AppApiGateway
        GWHostedZoneId:
          !FindInMap [ApiGwConfig, !Ref RunEnvironment, HostedZoneId]
        CloudfrontDomain: !GetAtt [AppFrontendCloudfrontDistribution, DomainName]

  AppLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
        AllowOrigins: ["*"]
        MaxAge: 300
      InvokeMode: BUFFERED
      TargetFunctionArn: !GetAtt AppApiLambdaFunction.Arn

  AppApiLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AppLogGroups
    Properties:
      Architectures: [x86_64]
      CodeUri: ../dist/lambda
      AutoPublishAlias: live
      Runtime: nodejs22.x
      Description: !Sub "${ApplicationFriendlyName} API Lambda"
      FunctionName: !Sub ${ApplicationPrefix}-lambda
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt AppSecurityRoles.Outputs.MainFunctionRoleArn
      Timeout: 60
      Environment:
        Variables:
          RunEnvironment: !Ref RunEnvironment
          EntraRoleArn: !GetAtt AppSecurityRoles.Outputs.EntraFunctionRoleArn
          LinkryKvArn: !GetAtt LinkryRecordsCloudfrontStore.Arn
          AWS_CRT_NODEJS_BINARY_RELATIVE_PATH: node_modules/aws-crt/dist/bin/linux-x64-glibc/aws-crt-nodejs.node
      VpcConfig:
        Ipv6AllowedForDualStack: !If [ShouldAttachVpc, True, !Ref AWS::NoValue]
        SecurityGroupIds:
          !If [
            ShouldAttachVpc,
            !FindInMap [
              EnvironmentToCidr,
              !Ref RunEnvironment,
              SecurityGroupIds,
            ],
            !Ref AWS::NoValue,
          ]
        SubnetIds:
          !If [
            ShouldAttachVpc,
            !FindInMap [EnvironmentToCidr, !Ref RunEnvironment, SubnetIds],
            !Ref AWS::NoValue,
          ]
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AppApiGateway
            Path: /{proxy+}
            Method: ANY
        WarmingSchedule:
          Type: Schedule
          Properties:
            Schedule: !If [
              ShouldAttachVpc,
              'rate(15 minutes)',
              'rate(5 minutes)'
              ]
            Input: '{ "warmer":true,"concurrency":3 }'


  AppSqsLambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AppLogGroups
    Properties:
      Architectures: [x86_64]
      CodeUri: ../dist/sqsConsumer
      AutoPublishAlias: live
      Runtime: nodejs22.x
      Description: !Sub "${ApplicationFriendlyName} SQS Lambda"
      FunctionName: !Sub ${ApplicationPrefix}-sqs-lambda
      Handler: index.handler
      MemorySize: 512
      Role:
        Fn::GetAtt: AppSecurityRoles.Outputs.SqsFunctionRoleArn
      Timeout: !Ref SqsLambdaTimeout
      LoggingConfig:
        LogGroup: !Sub /aws/lambda/${ApplicationPrefix}-lambda
      Environment:
        Variables:
          RunEnvironment: !Ref RunEnvironment
          EntraRoleArn: !GetAtt AppSecurityRoles.Outputs.EntraFunctionRoleArn
      VpcConfig:
        Ipv6AllowedForDualStack: !If [ShouldAttachVpc, True, !Ref AWS::NoValue]
        SecurityGroupIds:
          !If [
            ShouldAttachVpc,
            !FindInMap [
              EnvironmentToCidr,
              !Ref RunEnvironment,
              SecurityGroupIds,
            ],
            !Ref AWS::NoValue,
          ]
        SubnetIds:
          !If [
            ShouldAttachVpc,
            !FindInMap [EnvironmentToCidr, !Ref RunEnvironment, SubnetIds],
            !Ref AWS::NoValue,
          ]

  SQSLambdaEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AppSqsLambdaFunction
    Properties:
      BatchSize: 5
      EventSourceArn: !GetAtt AppSQSQueues.Outputs.MainQueueArn
      FunctionName: !Sub ${ApplicationPrefix}-sqs-lambda
      FunctionResponseTypes:
        - ReportBatchItemFailures

  SQSLambdaEventMappingSales:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AppSqsLambdaFunction
    Properties:
      BatchSize: 5
      EventSourceArn: !GetAtt AppSQSQueues.Outputs.SalesEmailQueueArn
      FunctionName: !Sub ${ApplicationPrefix}-sqs-lambda
      FunctionResponseTypes:
        - ReportBatchItemFailures

  MembershipRecordsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-membership-provisioning
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  ApiKeyTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-keys
      DeletionProtectionEnabled: !If [IsProd, true, false]
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: keyId
          AttributeType: S
      KeySchema:
        - AttributeName: keyId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  ExternalMembershipRecordsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-membership-external
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: netid_list
          AttributeType: S
      KeySchema:
        - AttributeName: netid_list
          KeyType: HASH

  RoomRequestsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-room-requests
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: userId#requestId
          AttributeType: S
        - AttributeName: requestId
          AttributeType: S
        - AttributeName: semesterId
          AttributeType: S
      KeySchema:
        - AttributeName: semesterId
          KeyType: HASH
        - AttributeName: userId#requestId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: RequestIdIndex
          KeySchema:
            - AttributeName: requestId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  RoomRequestUpdatesTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-room-requests-status
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: requestId
          AttributeType: S
        - AttributeName: semesterId
          AttributeType: S
        - AttributeName: createdAt#status
          AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
        - AttributeName: createdAt#status
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SemesterId
          KeySchema:
            - AttributeName: semesterId
              KeyType: HASH
            - AttributeName: requestId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL



  IamGroupRolesTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-iam-grouproles
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      AttributeDefinitions:
        - AttributeName: groupUuid
          AttributeType: S
      KeySchema:
        - AttributeName: groupUuid
          KeyType: HASH

  IamUserRolesTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-iam-userroles
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      AttributeDefinitions:
        - AttributeName: userEmail
          AttributeType: S
      KeySchema:
        - AttributeName: userEmail
          KeyType: HASH

  EventRecordsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-events
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: host
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: HostIndex
          KeySchema:
            - AttributeName: host
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  StripeLinksTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-stripe-links
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: linkId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: "HASH"
        - AttributeName: linkId
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: LinkIdIndex
          KeySchema:
            - AttributeName: linkId
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  LinkryRecordsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: "infra-core-api-linkry"
      DeletionProtectionEnabled: !If [IsProd, true, false] # TODO: remove this
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: "slug"
          AttributeType: "S"
        - AttributeName: "access"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "slug"
          KeyType: "HASH"
        - AttributeName: "access"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "AccessIndex"
          KeySchema:
            - AttributeName: "access"
              KeyType: "HASH"
            - AttributeName: "slug"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  CacheRecordsTable:
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: "Retain"
    UpdateReplacePolicy: "Retain"
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: infra-core-api-cache
      DeletionProtectionEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      AttributeDefinitions:
        - AttributeName: primaryKey
          AttributeType: S
      KeySchema:
        - AttributeName: primaryKey
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: "expireAt"
        Enabled: true

  AppApiGateway:
    Type: AWS::Serverless::Api
    DependsOn:
      - AppApiLambdaFunction
    Properties:
      Name: !Sub ${ApplicationPrefix}-gateway
      Description: !Sub "${ApplicationFriendlyName} API Gateway"
      MinimumCompressionSize: 2048 # 2kb to compress
      AlwaysDeploy: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./phony-swagger.yml
        Route53:
          HostedZoneId:
            !FindInMap [ApiGwConfig, !Ref RunEnvironment, HostedZoneId]
      StageName: default
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date'"
        AllowOrigin: "'*'"
        MaxAge: "'300'"

  APIDefault4XXResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref AppApiGateway
      ResponseType: DEFAULT_4XX
      StatusCode: "404"
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        application/json: '{"error": true, "message": "Resource not found. Check your URL or contact support."}'

  APIAccessDeniedResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref AppApiGateway
      ResponseType: ACCESS_DENIED
      StatusCode: "403"
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        application/json: '{"error": true, "message": "Access denied. Perhaps reauthenticate and try again?"}'

  APIUnauthorizedResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref AppApiGateway
      ResponseType: UNAUTHORIZED
      StatusCode: "401"
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseTemplates:
        application/json: '{"error": true, "message": "Request could not be authenticated. Perhaps reauthenticate and try again?"}'

  AppApiGatewayLatencyAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProd
    Properties:
      AlarmName: !Sub ${ApplicationPrefix}-gateway-latency-high
      AlarmDescription: "Trailing Mean - 95% API gateway latency is > 1.25s for 2 times in 4 minutes."
      Namespace: "AWS/ApiGateway"
      MetricName: "Latency"
      ExtendedStatistic: "tm95"
      Period: "120"
      EvaluationPeriods: "2"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: "1250"
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: "ApiName"
          Value: !Sub ${ApplicationPrefix}-gateway

  AppApiGatewayNoRequestsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProd
    Properties:
      AlarmName: !Sub ${ApplicationPrefix}-gateway-no-requests
      AlarmDescription: "No requests have been received in the past 5 minutes."
      Namespace: "AWS/ApiGateway"
      MetricName: "Count"
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      ComparisonOperator: "LessThanThreshold"
      Threshold: "1"
      AlarmActions:
        - !Ref PriorityAlertSNSArn
      Dimensions:
        - Name: "ApiName"
          Value: !Sub ${ApplicationPrefix}-gateway

  AppApiGateway5XXErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProd
    Properties:
      AlarmName: !Sub ${ApplicationPrefix}-gateway-5xx
      AlarmDescription: "More than 2 API gateway 5XX errors were detected."
      Namespace: "AWS/ApiGateway"
      MetricName: "5XXError"
      Statistic: "Average"
      Period: "60"
      EvaluationPeriods: "1"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: "2"
      AlarmActions:
        - !Ref PriorityAlertSNSArn
      Dimensions:
        - Name: "ApiName"
          Value: !Sub ${ApplicationPrefix}-gateway

  AppDLQMessagesAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsProd
    Properties:
      AlarmName: !Sub ${ApplicationPrefix}-sqs-dlq
      AlarmDescription: "Items are present in the application DLQ, meaning some messages failed to process."
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Statistic: "Maximum"
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 0
      Dimensions:
        - Name: QueueName
          Value: !Sub ${ApplicationPrefix}-sqs-dlq
      AlarmActions:
        - !Ref PriorityAlertSNSArn

  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AppApiLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref AppApiGateway
            - "/*/*/*"

  AppFrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${S3BucketPrefix}-ui
      WebsiteConfiguration:
        IndexDocument: index.html

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Access identity for ${AppFrontendS3Bucket}"

  AppFrontendCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: 'http2and3'
        Origins:
          - Id: S3WebsiteOrigin
            DomainName: !GetAtt AppFrontendS3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: ApiGatewayOrigin
            DomainName: !GetAtt AppLambdaUrl.FunctionUrl
            OriginPath: "/"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !FindInMap
            - ApiGwConfig
            - !Ref RunEnvironment
            - UiDomainName

        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: S3WebsiteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # caching-optimized
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref AppFrontendEdgeLambdaVersion
        CacheBehaviors:
          - PathPattern: "/api/v1/events*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - DELETE
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: !Ref CloudfrontCachePolicy
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            Compress: true
          - PathPattern: "/api/v1/organizations"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - DELETE
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            Compress: true
          - PathPattern: "/api/documentation*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - DELETE
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            Compress: true
          - PathPattern: "/api/*"
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - DELETE
              - PATCH
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: !Ref CloudfrontNoCachePolicy # caching disabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            Compress: true
        ViewerCertificate:
          AcmCertificateArn: !FindInMap
            - ApiGwConfig
            - !Ref RunEnvironment
            - EnvCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100

  AppFrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppFrontendS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub "${AppFrontendS3Bucket.Arn}/*"

  CloudfrontNoCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Cache policy with caching disabled and Gzip/Brotli enabled
        DefaultTTL: 0
        MaxTTL: 1
        MinTTL: 0
        Name: NoCache-GzipBrotli-Enabled
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CloudfrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: UseOriginCacheControlHeaders-QueryStrings-NoCookies
        Comment: "UseOriginCacheControlHeaders-QueryStrings but dont cache cookies."
        DefaultTTL: 0
        MaxTTL: 31536000
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - x-method-override
              - origin
              - host
              - x-http-method
              - x-http-method-override
          QueryStringsConfig:
            QueryStringBehavior: all
          CookiesConfig:
            CookieBehavior: none

  AppFrontendEdgeLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - AppLogGroups
    Properties:
      FunctionName: !Sub ${ApplicationPrefix}-lambda-edge
      Handler: "index.handler"
      Role: !GetAtt AppSecurityRoles.Outputs.EdgeFunctionRoleArn
      Runtime: nodejs22.x
      Code:
        ZipFile: |
          'use strict';
          exports.handler = async (event) => {
              const request = event.Records[0].cf.request;
              const uri = request.uri;
              if (!uri.startsWith('/api') && !uri.match(/\.\w+$/)) {
                  request.uri = "/index.html";
              }
              return request;
          };
      MemorySize: 128
      Timeout: 5

  AppFrontendEdgeLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref AppFrontendEdgeLambda

  AppIcalCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: 'http2and3'
        Origins:
          - Id: ApiGatewayOrigin
            DomainName: !Sub "${AppApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/default"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        Aliases:
          - !Join
            - ""
            - - "ical."
              - !FindInMap
                - ApiGwConfig
                - !Ref RunEnvironment
                - EnvDomainName
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - DELETE
            - PATCH
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          CachePolicyId: !Ref CloudfrontCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
        ViewerCertificate:
          AcmCertificateArn: !FindInMap
            - ApiGwConfig
            - !Ref RunEnvironment
            - EnvCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100

  LinkryRecordsCloudfrontStore:
    Type: AWS::CloudFront::KeyValueStore
    Properties:
      Name: infra-core-api-cloudfront-linkry-kv

  LinkryRecordsCloudfrontFunction:
    Type: 'AWS::CloudFront::Function'
    Properties:
      Name: infra-core-api-cloudfront-linkry-redir
      FunctionConfig:
        Comment: 'Linkry Redirect Cloudfront Function'
        Runtime: 'cloudfront-js-2.0'
        KeyValueStoreAssociations:
          - KeyValueStoreARN: !Sub '${LinkryRecordsCloudfrontStore.Arn}'
      FunctionCode: !Sub |
        import cf from 'cloudfront';
        const kvsId = '${LinkryRecordsCloudfrontStore.Id}';
        const kvs = cf.kvs(kvsId);

        async function handler(event) {
          const request = event.request;
          const path = request.uri.replace(/^\/+/, '');
          if (path === "") {
            return {
              statusCode: 301,
              statusDescription: 'Found',
              headers: {
                'location': { value: "https://core.acm.illinois.edu/linkry" }
              }
            }
          }
          let redirectUrl = "https://acm.illinois.edu/404";
          try {
            const value = await kvs.get(path);
            if (value) {
              redirectUrl = value;
            }
          } catch (err) {
            console.log('KVS key lookup failed');
          }
          var response = {
            statusCode: 302,
            statusDescription: 'Found',
            headers: {
              'location': { value: redirectUrl }
            }
          };
          return response;
        }
      AutoPublish: true

  AppLinkryCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        HttpVersion: 'http2and3'
        Enabled: true
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: dummyOrigin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt LinkryRecordsCloudfrontFunction.FunctionARN
        Origins:
          - Id: dummyOrigin
            DomainName: example.com
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Aliases:
          - !Join
            - ""
            - - "go."
              - !FindInMap
                - ApiGwConfig
                - !Ref RunEnvironment
                - EnvDomainName
        ViewerCertificate:
          AcmCertificateArn: !FindInMap
            - ApiGwConfig
            - !Ref RunEnvironment
            - EnvCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100

  LinkryDomainProxy:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./custom-domain.yml
      Parameters:
        RunEnvironment: !Ref RunEnvironment
        RecordName: go
        GWBaseDomainName: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvDomainName
        GWCertArn: !FindInMap
          - ApiGwConfig
          - !Ref RunEnvironment
          - EnvCertificateArn
        GWApiId: !Ref AppApiGateway
        GWHostedZoneId:
          !FindInMap [ApiGwConfig, !Ref RunEnvironment, HostedZoneId]
        CloudfrontDomain: !GetAtt [AppLinkryCloudfrontDistribution, DomainName]

Outputs:
  DomainName:
    Description: Domain name that the UI is hosted at
    Value: !FindInMap
      - ApiGwConfig
      - !Ref RunEnvironment
      - UiDomainName

  CloudfrontCnameTarget:
    Description: CNAME record target to create for the domain name above (create the CNAME manually)
    Value:
      Fn::GetAtt:
        - AppFrontendCloudfrontDistribution
        - DomainName

  CloudfrontSecondaryCnameTarget:
    Description: CNAME record target to create for the secondary domain names (create the CNAME manually)
    Value:
      Fn::GetAtt:
        - AppIcalCloudfrontDistribution
        - DomainName

  CloudfrontDistributionId:
    Description: Cloudfront Distribution ID
    Value: !GetAtt AppFrontendCloudfrontDistribution.Id

  CloudfrontIcalDistributionId:
    Description: Cloudfront Distribution ID
    Value: !GetAtt AppIcalCloudfrontDistribution.Id

  SalesEmailQueueArn:
    Description: Sales Email Queue Arn
    Value: !GetAtt AppSQSQueues.Outputs.SalesEmailQueueArn
