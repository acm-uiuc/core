AWSTemplateFormatVersion: "2010-09-09"
Description: Stack IAM Roles
Transform: AWS::Serverless-2016-10-31

Parameters:
  RunEnvironment:
    Type: String
    AllowedValues:
      - dev
      - prod
  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  SesEmailDomain:
    Type: String
  SqsQueueArn:
    Type: String

Resources:
  # Managed Policy for Common Lambda Permissions
  CommonLambdaManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: infra-core-api-commonlambdapolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*

          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:infra-core-api-config*

          - Action:
              - dynamodb:DescribeLimits
            Effect: Allow
            Resource: "*"

          # Common DynamoDB Permissions
          - Sid: DynamoDBTableAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-events
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-merchstore-purchase-history
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-events-tickets
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-events-ticketing-metadata
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-merchstore-metadata
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-iam-userroles
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-iam-grouproles
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-stripe-links
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-membership-provisioning

          - Sid: DynamoDBCacheAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-cache
            Condition:
              ForAllValues:StringEquals:
                dynamodb:LeadingKeys:
                  - testing # add any keys that must be accessible
              ForAllValues:StringLike:
                dynamodb:Attributes:
                  - primaryKey
                  - expireAt
                  - "*"

          - Sid: DynamoDBRateLimitTableAccess
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:UpdateItem
            Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-rate-limiter

          - Sid: DynamoDBIndexAccess
            Effect: Allow
            Action:
              - dynamodb:Query
            Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-stripe-links/index/*
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-events/index/*
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-merchstore-purchase-history/index/*

          - Sid: DynamoDBStreamAccess
            Effect: Allow
            Action:
              - dynamodb:GetShardIterator
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:ListStreams
            Resource:
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-stripe-links/stream/*
              - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-events/stream/*

  # API Lambda IAM Role
  ApiLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref CommonLambdaManagedPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

      Policies:
        - PolicyName: lambda-generic
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - sqs:SendMessage
                Effect: Allow
                Resource:
                  - Fn::Sub: "${SqsQueueArn}"

  EntraLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref CommonLambdaManagedPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
          - Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt: ApiLambdaIAMRole.Arn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS:
                - Fn::GetAtt: SqsLambdaIAMRole.Arn
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda-get-entra-secret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:infra-core-api-entra*
              - Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-core-api-cache
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:LeadingKeys:
                      - entra_id_access_token # add any keys that must be accessible
                  ForAllValues:StringLike:
                    dynamodb:Attributes:
                      - primaryKey
                      - expireAt
                      - "*"

  # SQS Lambda IAM Role
  SqsLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - !Ref CommonLambdaManagedPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: ses-membership
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Effect: Allow
                Resource: "*"
                Condition:
                  StringEquals:
                    ses:FromAddress:
                      Fn::Sub: "membership@${SesEmailDomain}"
                  ForAllValues:StringLike:
                    ses:Recipients:
                      - "*@illinois.edu"

Outputs:
  MainFunctionRoleArn:
    Description: Main API IAM role ARN
    Value: !GetAtt ApiLambdaIAMRole.Arn

  SqsFunctionRoleArn:
    Description: SQS IAM role ARN
    Value: !GetAtt SqsLambdaIAMRole.Arn

  EntraFunctionRoleArn:
    Description: Entra IAM role ARN
    Value: !GetAtt EntraLambdaIAMRole.Arn
